name: Deploy to AWS EC2 #Name of action
    #specifying action trigger
on:
    push:
      branches:
          - main

jobs: # Set of Operation that will run a github virtual environment
    Build_and_push_image: # specifying one job
        runs-on: ubuntu-latest # specifying the OS the job will run on
        steps: # list or operations that will run
            - name: Checkout repository # Name of first operation
              uses: actions/checkout@v2 # using an existing github action to checkout into the main repository (like git checkout branchname)

            - name: Install Docker #Operation to install docker listed
              run: | # Run helps to run commands in the vitual environment (In this case we are running steps to install docker so we can build and push docker images to our ECR)
                sudo apt-get update
                sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg
                echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get -y install docker-ce docker-ce-cli containerd.io    

            - name: Log in to ECR
              id: ecr-publish
              uses: bitovi/github-actions-ecr-publish@v0.1.0
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-aws_default_region: ${{ secrets.AWS_REGION }}
                ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
                aws_ecr_repo_name: booking-api
                IMAGE_TAG: 1.0.0
                #role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role

            - name: Build and push Docker image # This step pushes to ecr by using the docker command under run
              run: |
                docker build -t $ECR_REGISTRY/booking-api:$IMAGE_TAG .
                docker push $ECR_REGISTRY/booking-api:$IMAGE_TAG

            - name: copy file via ssh key #We would need our docker compose file in the ec2 instance so we are copying it there ahead of time using an existing scp github action
              uses: appleboy/scp-action@v0.1.7 # the githhub action we are using
              with:  #passing the required credentials from our secret
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_PRIVATE_KEY }}
                port: 22
                source: "docker-compose.yml"
                target: "/home/ubuntu"
    Pull_and_deploy_in_ec2:  # After pushing to ecr we need to pull from our ec2 and spin up the container. so we define a seperate job for it
        runs-on: ubuntu-latest # specifying OS for job to run in
        needs: Build_and_push_image
        steps:
        - name: Deploy to EC2
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_PRIVATE_KEY }}
            script: |

              # Installing aws cli
              sudo apt-get update
              sudo apt-get install -y awscli

              # Configure AWS credentials

              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}

              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

              aws configure set default.region ${{ secrets.EC2_HOST }}

              # Install Docker inside the remote EC2 instance

              sudo apt-get update

              sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common

              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg

              echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              sudo apt-get update

              sudo apt-get -y install docker-ce docker-ce-cli containerd.io

              # Authenticate to ECR

              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

              # Add environmental variable
              export ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}

              # Add SSH user to the docker group
              sudo usermod -aG docker $USER

              # Install Docker Compose inside the remote EC2 instance
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

              # Clear existing container and images with added project name, This will prevent the command from clearing containers of other docker compose file
              docker-compose -f ~/docker-compose.yml -p booking-api down --rmi all

              # Run the Docker commands for deployment with added project name , future down command will clear containers and images with this project name
              docker-compose -f ~/docker-compose.yml -p booking-api up -d
